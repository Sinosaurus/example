let n1 = 10 // 001010
let n2 = 38 // 100110

// &
// 1 & 1 = 1
// 1 & 0 = 0
// 0 & 1 = 0
// 0 & 0 = 0

// 从右往左算 0 * 2^0 + 1 * 2 ^1
n1 & n2 = 000010 = 2

// |
// 1 | 1 = 1
// 1 | 0 = 1
// 0 | 1 = 1
// 0 | 0 = 0
n1 | n2 = 101110 = 46

// ^ 
// 1 ^ 1 = 0
// 0 ^ 0 = 0
// 1 ^ 0 = 1
// 0 ^ 1 = 1
n1 ^ n2 = 101100 = 44

// ~ 32位的数据
// 取反

// 左移 << 移动多少位 2 ^ 多少位
// 001010
n1 << 1 = 00010100 = 20
n1 << 2 = 00101000 = 40
n1 << 3 = 01010000 = 80
n1 << 4 = 10100000 = 160
// **二进制操作会比 单纯乘法快很多**

// >>
// 00001010
n1 >> 1 = 00000101 = 5
n1 >> 2 = 00000010 = 2
n1 >> 3 = 00000001 = 1
n1 >> 4 = 00000000 = 0
